package net.nosegrind.restrpc

import org.springframework.dao.DataIntegrityViolationException
import grails.converters.JSON
import grails.converters.XML
import java.lang.reflect.Method
import grails.validation.Validateable


class ApidocController {

	def grailsApplication
	def springSecurityService
	
	def index(){
		redirect(action:'show')
	}

	def show(){
		def apiOutput = []
		def inc = 0
		grailsApplication.controllerClasses.each { controllerClass ->
			String controllername = controllerClass.logicalPropertyName
			if(controllername!='aclClass'){
				
				def controller = grailsApplication.getArtefactByLogicalPropertyName('Controller', controllername)
				//def methods = controller?.getClazz().metaClass.methods*.name.sort().unique()
				for (Method method : controller.getClazz().getMethods()){
						if(method.isAnnotationPresent(Api)) {
							if(apiOutput[inc]?.parent!="${controllerClass.logicalPropertyName}"){
								inc++
							}
							if(!apiOutput[inc]){
								apiOutput[inc] = [parent:"${controllerClass.logicalPropertyName}",api:[],json:[]]
							}
							
							def action = method.getName()
							def api = method.getAnnotation(Api)
							def apiList = [path:"${controllername}/${method.getName()}",method:"${api.method()}",description:"${api.description()}",receives:[],returns:[],errors:[]]

							// RECEIVES
							def params = api.receives()
							params.each{ p ->
								if (p.paramType()) {
									def list = [type:"${p.paramType()}",name:"${p.name()}",description:"${p.description()}",required:"${p.required()}",receives:[]]
									if(p?.values()){
										def params2 = p.params()
										params2.each{ p2 ->
											if (p2.paramType()) {
												def pm2 = [type:"${p2.paramType()}",name:"${p2.name()}",description:"${p2.description()}",required:"${p2.required()}"]
												list.receives.add(pm2)
											}
										}
									}
									apiList.receives.add(list)
								}
							}
							
							// RETURNS
							def returns = api.returns()
							def json = [:]
							returns.each{ p ->
								if(checkAuthority(p.roles() as Set)==true){

											def list = [type:"${p.paramType()}",name:"${p.name()}",description:"${p.description()}",required:"${p.required()}",params:[]]
											def j = [:]
											if(p?.values()){
												j["${p.name()}"]=[]
											}else{
												j = (p?.mockData().trim())?["${p.name()}":"${p.mockData()}"]:["${p.name()}":"${grailsApplication.config.restrpc.defaultData.(p.paramType())}"]
											}
											if(p?.values()){
												def returns2 = p.values()
												returns2.each{ p2 ->
													if (p2.paramType()) {
														def pm2 = [type:"${p2.paramType()}",name:"${p2.name()}",description:"${p2.description()}",required:"${p2.required()}"]
														def j2 = ["${p2.name()}":"${grailsApplication.config.restrpc.defaultData.(p2.paramType())}"]
														j["${p.name()}"].add(j2)
														list.params.add(pm2)
													}
												}
											}
											j.each(){ key,val ->
												if(val instanceof List){
													def child = [:]
													val.each(){ it ->
														it.each(){ key2,val2 ->
															child["${key2}"] ="${val2}"
														}
													}
													json["${key}"] = child
												}else{
													json["${key}"]=val
												}
											}
		
											//json.add(j)
											apiList.returns.add(list)
								}
							}
							
							// ERRORS
							def errorList = []
							def errors = api.errors()
							errors.each{ p ->
								if (p.code()) {
									def list = [code:"${p.code()}",description:"${p.description()}"]
									apiList.errors.add(list)
								}
							}

							if(apiOutput[inc].parent && !apiList.isEmpty()){
								json = json as JSON
								json = json.toString().replaceAll("\\{\n","\\{<br><div style='padding-left:2em;'>")
								json = json.toString().replaceAll("}"," </div>}<br>")
								json = json.toString().replaceAll(",",",<br>")
								apiOutput[inc].json.add(json)
								apiOutput[inc].api.add(apiList)
							}
						}
				}
			}
			
		}
		apiOutput.remove(null)

		[apiList:apiOutput]
	}
	
	/*
	 * IF NO ROLES, RETURN TRUE. IF ROLES, CHECK IF THEY ARE IN AUTHORITIES.
	 * THEN CHECK IF USER IS LOGGED IN AND HAS ANY OF SAID ROLES
	 */
	boolean checkAuthority(HashSet set){
		def roles = set as List
		if(roles.size()>0 && roles[0].trim()){
			def roles2 = grailsApplication.getDomainClass(grailsApplication.config.grails.plugins.springsecurity.authority.className).clazz.list().authority
			def finalRoles
			def userRoles
			if (springSecurityService.isLoggedIn()){
				userRoles = springSecurityService.getPrincipal().getAuthorities()
			}
			
			if(userRoles){
				def temp = roles2.intersect(roles as Set)
				finalRoles = temp.intersect(userRoles)
				if(finalRoles){
					return true
				}else{
					return false
				}
			}else{
				return false
			}
		}else{
			return true
		}
	}


}

