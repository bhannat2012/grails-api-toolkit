package net.nosegrind.restrpc

import org.springframework.dao.DataIntegrityViolationException
import grails.converters.JSON
import grails.converters.XML
import java.lang.reflect.Method
import net.nosegrind.restrpc.ParamsDescriptor
import net.nosegrind.restrpc.ErrorCodeDescriptor

class ApidocController {

	def grailsApplication
	def springSecurityService
	def apiCacheService
	
	def index(){
		redirect(action:'show')
	}

	Map processDocValues(ParamsDescriptor values){
		if(v.receives.roles){
			if(!checkAuthority(v.receives.roles)){
				def val = []
			}
		}else{
			def val = [
				"paramType":"${values.paramtype}",
				"name":"${values.name}",
				"description":"${values.description}"
			]
			
			// not required; check and do after initial assign
			if(v.receives.paramtype){
				val["idReferences"] = "${v.receives.idReference}"
			}
	
			if(v.receives.required==false){
				val["required"] = false
			}
			if(v.receives.mockData){
				val["mockData"] = "${v.receives.mockData}"
			}
			if(values.values){
				val["values"] = processDocValues(values.values)
			}
		
		}

		return val
	}
	
	Map processDocErrorCodes(ErrorCodeDescriptor errors){
		def err = []
		errors.each{ k,v ->
			def code = ['code':v.code,'description':"${v.description}"]
			err.add(code)
		}
		return err
	}
	
	/*
	 * Go through all controllers/method, check for anno and
	 * get apidocs where anno exists
	 */
	def show(){
		def apidoc = []
		grailsApplication.controllerClasses.each { controllerClass ->
			String controllername = controllerClass.logicalPropertyName
			if(controllername!='aclClass'){
				def cont = apiCacheService.getApiCache(controllername)
				def controller = grailsApplication.getArtefactByLogicalPropertyName('Controller', controllername)
				for (Method method : controller.getClazz().getMethods()){
					if(method.isAnnotationPresent(Api)) {
						def action = method.getName()
						if(cont["${controllername}"]["${action}"]){
							def doc = [
								("${controllername}".toString()):[
									("${k}".toString()):[
										"method":"${v.method}",
										"description":"${v.description}",
										"receives": processDocValues(v.receives),
										"returns": processDocValues(v.returns),
										"errorcodes": processDocErrorCodes(v.errorcodes)
									]
								]
							]
							if(doc["${controllername}"]["${k}"]["returns"]){
								json = doc["${controllername}"]["${k}"]["returns"] as JSON
								json = json.toString().replaceAll("\\{\n","\\{<br><div style='padding-left:2em;'>")
								json = json.toString().replaceAll("}"," </div>}<br>")
								json = json.toString().replaceAll(",",",<br>")
								doc["${controllername}"]["${k}"]["json"] = json
							}
							apidoc.add(doc)
						}
					}
				}
			}

		}
		//println(apidoc)
		[apiList:apidoc]
	}
	
	/*
	 * IF NO ROLES, RETURN TRUE. IF ROLES, CHECK IF THEY ARE IN AUTHORITIES.
	 * THEN CHECK IF USER IS LOGGED IN AND HAS ANY OF SAID ROLES
	 */
	// previously HashSet
	boolean checkAuthority(HashSet role){
		List roles = role as List
		if(roles.size()>0 && roles[0].trim()){
			def roles2 = grailsApplication.getDomainClass(grailsApplication.config.grails.plugins.springsecurity.authority.className).clazz.list().authority
			def finalRoles
			def userRoles
			if (springSecurityService.isLoggedIn()){
				userRoles = springSecurityService.getPrincipal().getAuthorities()
			}
			
			if(userRoles){
				def temp = roles2.intersect(roles as Set)
				finalRoles = temp.intersect(userRoles)
				if(finalRoles){
					return true
				}else{
					return false
				}
			}else{
				return false
			}
		}else{
			return true
		}
	}


}

